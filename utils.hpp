#ifndef __UTILS_HPP__
#define __UTILS_HPP__

#include <assert.h>
#include <algorithm>
#include <math.h>

//const int NumIntPts = 1;
//const double GaussWeights[NumIntPts] = {1.0};
//const double GaussPoints[NumIntPts][4] = {{1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0}};

const int NumIntPts = 15;
const double GaussWeights[NumIntPts] = {
	6.0*0.030283678097089, 
	6.0*0.006026785714286, 6.0*0.006026785714286, 6.0*0.006026785714286, 6.0*0.006026785714286, 
	6.0*0.011645249086029, 6.0*0.011645249086029, 6.0*0.011645249086029, 6.0*0.011645249086029, 
	6.0*0.010949141561386, 6.0*0.010949141561386, 6.0*0.010949141561386, 6.0*0.010949141561386, 6.0*0.010949141561386, 6.0*0.010949141561386};
const double GaussPoints[NumIntPts][4] = 
	{ {	0.250000000000000, 0.250000000000000, 0.250000000000000, 0.250000000000000 },
//
	  { 0.000000000000000, 0.333333333333333, 0.333333333333333, 0.333333333333333 },
	  { 0.333333333333333, 0.000000000000000, 0.333333333333333, 0.333333333333333 },
	  { 0.333333333333333, 0.333333333333333, 0.000000000000000, 0.333333333333333 },
	  { 0.333333333333333, 0.333333333333333, 0.333333333333333, 0.000000000000000 },
//
	  { 0.727272727272727, 0.090909090909091, 0.090909090909091, 0.090909090909091 },
	  { 0.090909090909091, 0.727272727272727, 0.090909090909091, 0.090909090909091 },
	  { 0.090909090909091, 0.090909090909091, 0.727272727272727, 0.090909090909091 },
	  { 0.090909090909091, 0.090909090909091, 0.090909090909091, 0.727272727272727 },
//
	  { 0.066550153573664, 0.066550153573664, 0.433449846426336, 0.433449846426336 },
	  { 0.066550153573664, 0.433449846426336, 0.066550153573664, 0.433449846426336 },
	  { 0.433449846426336, 0.066550153573664, 0.066550153573664, 0.433449846426336 },
	  { 0.066550153573664, 0.433449846426336, 0.433449846426336, 0.066550153573664 },
	  { 0.433449846426336, 0.066550153573664, 0.433449846426336, 0.066550153573664 },
	  { 0.433449846426336, 0.433449846426336, 0.066550153573664, 0.066550153573664 } };

const double pi = 3.14159265358979323846;

inline void die() { assert(false); }

template <class type>
inline type
min( type a, type b, type c ) {
  const type m = std::min( a, b );
  return std::min( m, c );
}

template <class type>
inline type
max( type a, type b, type c ) {
  const type m = std::max( a, b );
  return std::max( m, c );
}

template <class type>
inline type
sqr( type a ) {
   return a*a;
}

template <class T>
struct Delete : public std::unary_function<T*, void>{
  void operator()( T* x ) const { delete x; }
};



#endif